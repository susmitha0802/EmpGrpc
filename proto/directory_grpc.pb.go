// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: proto/directory.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmpServiceClient is the client API for EmpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmpServiceClient interface {
	SayCreateEmp(ctx context.Context, in *CreateEmpRequest, opts ...grpc.CallOption) (*CreateEmpResponse, error)
	SayReadEmp(ctx context.Context, in *ReadEmpRequest, opts ...grpc.CallOption) (*ReadEmpResponse, error)
	SayUpdateEmp(ctx context.Context, in *UpdateEmpRequest, opts ...grpc.CallOption) (*UpdateEmpResponse, error)
	SayDeleteEmp(ctx context.Context, in *DeleteEmpRequest, opts ...grpc.CallOption) (*DeleteEmpResponse, error)
}

type empServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmpServiceClient(cc grpc.ClientConnInterface) EmpServiceClient {
	return &empServiceClient{cc}
}

func (c *empServiceClient) SayCreateEmp(ctx context.Context, in *CreateEmpRequest, opts ...grpc.CallOption) (*CreateEmpResponse, error) {
	out := new(CreateEmpResponse)
	err := c.cc.Invoke(ctx, "/EmpService/sayCreateEmp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *empServiceClient) SayReadEmp(ctx context.Context, in *ReadEmpRequest, opts ...grpc.CallOption) (*ReadEmpResponse, error) {
	out := new(ReadEmpResponse)
	err := c.cc.Invoke(ctx, "/EmpService/sayReadEmp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *empServiceClient) SayUpdateEmp(ctx context.Context, in *UpdateEmpRequest, opts ...grpc.CallOption) (*UpdateEmpResponse, error) {
	out := new(UpdateEmpResponse)
	err := c.cc.Invoke(ctx, "/EmpService/sayUpdateEmp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *empServiceClient) SayDeleteEmp(ctx context.Context, in *DeleteEmpRequest, opts ...grpc.CallOption) (*DeleteEmpResponse, error) {
	out := new(DeleteEmpResponse)
	err := c.cc.Invoke(ctx, "/EmpService/sayDeleteEmp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmpServiceServer is the server API for EmpService service.
// All implementations must embed UnimplementedEmpServiceServer
// for forward compatibility
type EmpServiceServer interface {
	SayCreateEmp(context.Context, *CreateEmpRequest) (*CreateEmpResponse, error)
	SayReadEmp(context.Context, *ReadEmpRequest) (*ReadEmpResponse, error)
	SayUpdateEmp(context.Context, *UpdateEmpRequest) (*UpdateEmpResponse, error)
	SayDeleteEmp(context.Context, *DeleteEmpRequest) (*DeleteEmpResponse, error)
	mustEmbedUnimplementedEmpServiceServer()
}

// UnimplementedEmpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmpServiceServer struct {
}

func (UnimplementedEmpServiceServer) SayCreateEmp(context.Context, *CreateEmpRequest) (*CreateEmpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayCreateEmp not implemented")
}
func (UnimplementedEmpServiceServer) SayReadEmp(context.Context, *ReadEmpRequest) (*ReadEmpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayReadEmp not implemented")
}
func (UnimplementedEmpServiceServer) SayUpdateEmp(context.Context, *UpdateEmpRequest) (*UpdateEmpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayUpdateEmp not implemented")
}
func (UnimplementedEmpServiceServer) SayDeleteEmp(context.Context, *DeleteEmpRequest) (*DeleteEmpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayDeleteEmp not implemented")
}
func (UnimplementedEmpServiceServer) mustEmbedUnimplementedEmpServiceServer() {}

// UnsafeEmpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmpServiceServer will
// result in compilation errors.
type UnsafeEmpServiceServer interface {
	mustEmbedUnimplementedEmpServiceServer()
}

func RegisterEmpServiceServer(s grpc.ServiceRegistrar, srv EmpServiceServer) {
	s.RegisterService(&EmpService_ServiceDesc, srv)
}

func _EmpService_SayCreateEmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpServiceServer).SayCreateEmp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmpService/sayCreateEmp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpServiceServer).SayCreateEmp(ctx, req.(*CreateEmpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmpService_SayReadEmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadEmpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpServiceServer).SayReadEmp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmpService/sayReadEmp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpServiceServer).SayReadEmp(ctx, req.(*ReadEmpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmpService_SayUpdateEmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpServiceServer).SayUpdateEmp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmpService/sayUpdateEmp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpServiceServer).SayUpdateEmp(ctx, req.(*UpdateEmpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmpService_SayDeleteEmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmpServiceServer).SayDeleteEmp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmpService/sayDeleteEmp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmpServiceServer).SayDeleteEmp(ctx, req.(*DeleteEmpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmpService_ServiceDesc is the grpc.ServiceDesc for EmpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EmpService",
	HandlerType: (*EmpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sayCreateEmp",
			Handler:    _EmpService_SayCreateEmp_Handler,
		},
		{
			MethodName: "sayReadEmp",
			Handler:    _EmpService_SayReadEmp_Handler,
		},
		{
			MethodName: "sayUpdateEmp",
			Handler:    _EmpService_SayUpdateEmp_Handler,
		},
		{
			MethodName: "sayDeleteEmp",
			Handler:    _EmpService_SayDeleteEmp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/directory.proto",
}
